; (f '((1 2) (5 4) (1 3))) => '((1 1) (2) (3) (4) (5)) =>


(define (drop-empty lst)
  (cond ((null? lst) '())
        ((null? (car lst)) (drop-empty (cdr lst)))
        (else (append (list (car lst)) (drop-empty (cdr lst))))))
(define (add-int lst n)
  (cond ((null? lst) (list (list n)))
        ((= (car (car lst)) n) (append (list (append (car lst) (list n))) (cdr lst)))
        (else (append (list (car lst)) (add-int (cdr lst) n)))))

(define (group lst)
  (define (group-iter lst new-lst)
    (cond ((null? lst) new-lst)
          (else (group-iter (cdr lst) (add-int (add-int new-lst (car (car lst))) (car (cdr (car lst))))))))
  (group-iter lst '()))

(define (get-first-elem lst)
  (car (car lst)))
(define (rm-first-elem lst)
  (append (list (cdr (car lst))) (cdr lst)))
(define (get-second-elem lst)
  (define (iter lst new-lst)
    (cond ((null? lst) new-lst)
          (else (iter (cdr lst) (append new-lst (list (car (car lst))))))))
  (iter lst '()))
(define (rm-second-elem lst)
  (define (iter lst new-lst)
    (cond ((null? lst) new-lst)
          (else (iter (cdr lst) (cond ((null? (cdr (car lst))) new-lst)
                                      (else (append new-lst (list (cdr (car lst))))))))))
  (append (cdr (iter lst '())) (list (car (iter lst '())))))

(define (mix lst)
  (define (mix-iter lst new-lst)
    (cond ((null? lst) new-lst)
          (else (mix-iter (drop-empty (rm-second-elem (drop-empty (rm-first-elem lst)))) (append new-lst (list (list (get-first-elem lst) (get-second-elem lst))))))))
  (mix-iter lst '()))
    


;(add-int '((1 1) (2) (3) (4) (5)) 3)
;(add-int '((1 1) (2) (3) (4) (5)) 6)
;(group '((1 2) (5 4) (1 3)))
;(get-first-elem '((1 1) (2) (3) (4) (5)))
;(rm-first-elem '((1 1) (2) (3) (4) (5)))
;(get-second-elem '((1 1) (2) (3) (4) (5)))
;(rm-second-elem '((1 1) (2) (3) (4) (5)))
(mix (group '((1 2) (5 4) (1 3) (1 2) (3 1) (5 2))))